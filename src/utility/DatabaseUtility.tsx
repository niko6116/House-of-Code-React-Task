import React, { Component, Dispatch, SetStateAction, useEffect } from "react";
import { Text } from "react-native";
import auth from "@react-native-firebase/auth";
import database, { FirebaseDatabaseTypes } from '@react-native-firebase/database';
import RoomState from "./RoomState";



/*
Return all chat rooms from the database.
*/
function readRooms() {
    // Reference for chat rooms in the database.
    const ref = database().ref("chat-rooms");

    const json = ref.toJSON();
    console.log("JSON:", json);

    // Array for the loaded chat rooms.
    const data = [];

    // Pull data from database.
    ref.once('value').then(snapshot => {
        const exists = snapshot.val() !== null;

        // If snapshot is not empty.
        if (exists) {
            console.log('Rooms Snapshot: ', snapshot.val());

            // For each item in snapshot.
            snapshot.forEach(item => {
                const key = item.key;
                const id = item.key;
                const name = item.val().name;
                const description = item.val().description;

                // Create room.
                const room = { key, id, name, description };
                console.log("Room: ", room);

                // Save room.
                data.push(room);

                return false; // false is not assignable (seems to still compile), but true limits data return to one object
            });
            console.log("Room Data: ", data);
        }
    });

    // Return array with rooms.
    return data;
}

function readMessages(setMessages: Dispatch<SetStateAction<any[]>>) {
    // Id for current chat room.
    const roomID = RoomState.currentRoom;
    // Reference for messages in the chat room in the database.
    const ref = database().ref(`chat-rooms/${roomID}/messages`);

    // Array for the loaded messages.
    const data = [];

    // Pull data from database.
    ref.orderByChild("messageTime").on("value", snapshot => {
        const exists = snapshot.val() !== null;

        // If snapshot is not empty.
        if (exists) {
            console.log("Message data: ", snapshot.val());

            // For each item in snapshot.
            snapshot.forEach(item => {
                const key: string = item.key as string;
                const text: string = item.val().messageText as string;
                const time: string = item.val().messageTime as string;
                const name: string = item.val().messageUser as string;
                const userID: string = item.val().messageUserID as string;

                // Create message.
                const message = { key, text, time, name, userID };
                console.log("Message: ", message);

                // Save message.
                data.push(message);

                return false; // false is not assignable (seems to still compile), but true limits data return to one object
            });
        }
        console.log("Message Data: ", data);
        // Save array with messages.
        setMessages(data);
    });
}

function writeMessage(text: string, time: number, user: string, userID: string) {
    // Id for current chat room.
    const roomID = RoomState.currentRoom;
    // Push autogenerated key to create a new reference in the database.
    const ref = database().ref(`chat-rooms/${roomID}/messages`).push();

    console.log('Auto generated key: ', ref.key);

    // Push data to new reference.
    ref.set({
        messageText: text,
        messageTime: time,
        messageUser: user,
        messageUserID: userID
    })
        .then(() => console.log('Data updated.'));
}

export default {
    readRooms,
    readMessages,
    writeMessage
};